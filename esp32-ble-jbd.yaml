# This file is licensed under GNU GPLv2 ONLY
# Original credit:
# https://github.com/syssi/esphome-jbd-bms/blob/main/yaml-snippets/esp32-ble-deepsleep-limit-charging-automation.yaml

# An ESPHome sketch for safe charge terminating JBD BMS batteries for use with DUMB charging solutions.
# 22 July 2024 shvmm

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License v2
# as published by the Free Software Foundation; ONLY version 2 of the License.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License v2 for more details.

substitutions:
  name: shvm-jbd
  device_description: "Xiaoxiang BMS Charge Cutoff (JBD-BMS) using BLE"
  external_components_source: github://syssi/esphome-jbd-bms@main
  mac_address: a5:c2:37:05:6f:19

esphome:
  name: ${name}
  comment: ${device_description}
  min_version: 2024.7.1
  project:
    name: "syssi.esphome-jbd-bms"
    version: 1.5.0
  # on_boot:
  #   then:
  #     - switch.turn_on: cutoff_sw
esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf

external_components:
  - source: ${external_components_source}
    refresh: 0s

# api:
#   reboot_timeout: 0s

wifi:
  # ssid: !secret wifi_ssid
  # password: !secret wifi_password
  # domain: !secret domain
  ap:
    ssid: "ESP-JBD BMS"
    ap_timeout: 1s

# ota:
#   platform: esphome

logger:
  level: WARN
  # USE DEBUG while using Home Assistant

debug:
  update_interval: 20s

web_server:
  local: true
  version: 3
  js_url: "https://deploy-preview-115--esphome-webserver.netlify.app/v3/www.js"
  # auth:
  #   username: !secret web_server_username
  #   password: !secret web_server_password

# deep_sleep:
#   id: deep_sleep0
#   run_duration: 2min
#   sleep_duration: 10min

esp32_ble_tracker:

ble_client:
  - id: client0
    mac_address: ${mac_address}
    on_connect:
      then:
        - light.turn_on:
            id: blue_led
            brightness: 100%
            effect: None
        - lambda: |-            
            id(chg_status).publish_state("JBD BMS Connected");
            ESP_LOGW("ESP LED", "BLE Connect");
    on_disconnect:
      then:
        - light.turn_off:
            id: blue_led
        # - light.turn_on:
        #     id: blue_led
        #     effect: strobe
        - lambda: |-
            id(chg_status).publish_state("BMS Disconnected");
            ESP_LOGW("ESP LED", "BLE Disconnect");

jbd_bms_ble:
  - id: bms0
    ble_client_id: client0
    update_interval: 2s

output:
  - platform: ledc
    pin: 2
    id: pwm_led

light:
  - platform: monochromatic
    output: pwm_led
    id: blue_led
    effects:
      - strobe:
          name: "Strobe"
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 500ms
          min_brightness: 20%
          max_brightness: 100%
      - pulse:
          name: "Extraslow Pulse"
          transition_length: 1000ms
          update_interval: 1000ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 0%
          max_brightness: 100%

binary_sensor:
  - platform: jbd_bms_ble
    jbd_bms_ble_id: bms0
    balancing:
      name: "${name} balancing"
    online_status:
      name: "${name} online status"


sensor:
  - platform: jbd_bms_ble
    jbd_bms_ble_id: bms0
    battery_strings:
      name: "${name} battery strings"
    power:      
      name: "${name} Power"      
    charging_power:
      name: "${name} charging power"
      id: chg_power
      on_value:
        lambda: |-
          if ((x > 0) && (id(charging).state)) {
            id(chg_status).publish_state("Bulk");
            id(blue_led).turn_on().set_effect("Slow Pulse").perform();
          }
          else if (id(charging).state) {
            id(chg_status).publish_state("Idle/Discharging");
            id(blue_led).turn_on().set_effect("Extraslow Pulse").perform();
          }
    # discharging_power:
    #   name: "${name} discharging power"
    nominal_capacity:
      name: "${name} nominal capacity"
    charging_cycles:
      name: "${name} charging cycles"
    capacity_remaining:
      name: "${name} capacity remaining"
    battery_cycle_capacity:
      name: "${name} battery cycle capacity"
    total_voltage:
      name: "${name} total voltage"
    average_cell_voltage:
      name: "${name} avg cell voltage"
    delta_cell_voltage:
      name: "${name} Cell Î”V"
      accuracy_decimals: 3
    min_cell_voltage:
      name: "${name} min cell voltage"
    max_cell_voltage:
      id: max_cell_v
      name: "${name} Max cell voltage"
      on_value:
        then:
          # Enable ChargeMOS again if max_cell_v falls below some value.
          lambda: |-
            if (!(id(charging).state) && (id(max_cell_v).state < id(rebulk_v).state)) {
              id(charging).turn_on();
              id(chg_status).publish_state("Bulk");
              ESP_LOGW("BlueLED", "ChargeMOS ON again");
            }
        # Suspend deep sleep at the end of a charge cycle to stop on point (optional!)
        # - if:
        #     condition:
        #       and:
        #         - switch.is_on: charging
        #         - sensor.in_range:
        #             id: max_cell_v
        #             above: 3.375
        #     then:
        #       - deep_sleep.prevent: deep_sleep0
    current:
      id: current
      name: "${name} Current"
    min_voltage_cell:
      name: "${name} min voltage cell"
    max_voltage_cell:
      name: "${name} max voltage cell"
    temperature_1:
      name: "${name} T1"
    cell_voltage_1:
      name: "${name} cell voltage 1"
    cell_voltage_2:
      name: "${name} cell voltage 2"
    cell_voltage_3:
      name: "${name} cell voltage 3"
    cell_voltage_4:
      name: "${name} cell voltage 4"
    operation_status_bitmask:
      name: "${name} operation status bitmask"
    errors_bitmask:
      name: "${name} errors bitmask"
    balancer_status_bitmask:
      name: "${name} balancer status bitmask"
    software_version:
      name: "${name} sw ver."
    
    state_of_charge:
      name: "${name} SOC"
  
  # - platform: wifi_signal
  #   name: "${name} wifi Signal"
  #   update_interval: 120s

  - platform: uptime
    name: "${name} ESP Uptime"
  
  - platform: debug
    free:
      name: ${name} Debug Heap Free
    block:
      name: ${name} Debug Heap Max Block
    loop_time:
      name: ${name} Debug Loop Time

text_sensor:
  - platform: jbd_bms_ble
    jbd_bms_ble_id: bms0
    errors:
      name: "${name} errors"
    operation_status:
      name: "${name} operation status"
    device_model:
      name: "${name} device model"
  
  - platform: template
    name: "${name} ESP Chg Status"
    id: chg_status

switch:
  - platform: ble_client
    ble_client_id: client0
    name: "${name} enable bluetooth connection"

  - platform: jbd_bms_ble
    jbd_bms_ble_id: bms0
    charging:
      name: "${name} charging"
      id: charging
    discharging:
      name: "${name} discharging"
  
  # - platform: template
  #   name: "${name} Cutoff switch"
  #   id: cutoff_sw
  #   optimistic: true

number:
  # +-------------+
  # | Slider      |
  # +-------------+
  - platform: template
    name: "${name} Safety voltage"
    id: safety_v
    step: 0.02
    min_value: 3.36
    max_value: 3.56
    mode: slider
    initial_value: 3.48
    unit_of_measurement: V
    icon: mdi:battery-charging
    optimistic: true
  - platform: template
    name: "${name} Cutoff current"
    id: cutoff_amps
    step: 1
    min_value: 1
    max_value: 10
    mode: slider
    initial_value: 5
    unit_of_measurement: A
    icon: mdi:current-dc
    optimistic: true
  - platform: template
    name: "${name} Rebulk voltage"
    id: rebulk_v
    step: 0.01
    min_value: 3.28
    max_value: 3.36
    mode: slider
    initial_value: 3.33
    unit_of_measurement: V
    icon: mdi:battery-charging
    optimistic: true

interval:
  - interval: 2s
    startup_delay: 4s
    then:
      
      - lambda: |-
          // Max cell voltage cutoff is a safety/protection feature and always enabled just like in BMS

          if (id(charging).state && (id(max_cell_v).state > id(safety_v).state)) {
            id(charging).turn_off();
            id(chg_status).publish_state("High Voltage Cutoff");
            id(blue_led).turn_on().set_brightness(1.0).set_effect("Fast Pulse").perform();
            
            ESP_LOGW("BlueLED", "Fast Pulse HV Cutoff");
          }

          // Charge termination/cutoff

          if (id(charging).state & (id(current).state < id(cutoff_amps).state) & (id(max_cell_v).state > 3.45)) {
            id(charging).turn_off();
            id(chg_status).publish_state("Charging Power/Amp Cutoff");            
            id(blue_led).turn_on().set_brightness(1.0).set_effect("Strobe").perform();
            
            ESP_LOGW("BlueLED", "Strobe Power/Amp Cutoff");
          }